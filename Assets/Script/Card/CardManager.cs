using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using UnityEngine.SceneManagement;

public class CardManager : MonoBehaviour
{
    public static CardManager Instance { get; private set; }

    [Header("Card Pool")]
    public List<CardData> allCards;
    public int maxHeldCards = 2;
    public List<CardData> heldCards = new List<CardData>();

    [Header("Category Weights (‡∏õ‡∏£‡∏±‡∏ö % ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ)")]
    [Tooltip("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° Category ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß = 100 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å Normalized ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)")]
    public List<CategoryWeight> categoryWeights = new List<CategoryWeight>()
    {
        new CategoryWeight { category = CardCategory.Buff, weight = 40 },
        new CategoryWeight { category = CardCategory.Dispell, weight = 30 },
        new CategoryWeight { category = CardCategory.Neutral, weight = 20 },
        new CategoryWeight { category = CardCategory.Wildcard, weight = 10 }
    };
    [System.Serializable]
    public struct CategoryWeight
    {
        public CardCategory category;
        public int weight;
    }
    [Header("Fusion")]
    public CardFusionTable fusionTable;

    // ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
    private Queue<List<CardData>> optionsQueue = new Queue<List<CardData>>();
    private CardData pendingReplacementCard;
    private bool isReplaceMode = false;
    private List<CardData> lastOptions;

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å enqueue ‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    private int totalQueuedCount = 0;
    private int processedCount = 0;

    [Header("UI")]
    public UICardSelect uiSelect;
    // ====== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ CardManager ======
    [SerializeField] string cardsFolder       = "Cards";        // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å (Resources/Cards)
    [SerializeField] string cardsFolder_Test  = "Card_Tests";   // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏ó‡∏™‡∏ï‡πå (Resources/Cards_Test)
    [SerializeField] string fusionPath        = "CardFusions/Fusions";       // Resources/Fusion/CardFusionTable.asset
    [SerializeField] string fusionPath_Test   = "CardFusions/Fusions";  // Resources/Fusion/CardFusionTable_Test.asset
    [SerializeField] bool   useTestInThisScene = false; // ‡∏ï‡∏¥‡πä‡∏Å‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô‡πÅ‡∏£‡∏Å‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏ó‡∏™‡∏ï‡πå

    // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏°‡∏ã‡∏µ‡∏ô
    static bool   sInited;
    static string sActiveCardsFolder;
    static string sActiveFusionPath;

    void Awake()
    {
        if (Instance == null) Instance = this; else { Destroy(gameObject); return; }
        DontDestroyOnLoad(gameObject);

        maxHeldCards = 2;
        var prog = PlayerProgressSO.Instance;
        if (prog != null && prog.data != null)
            maxHeldCards = Mathf.Max(1, prog.data.maxCardSlots);
        else
            Debug.LogWarning("[CardManager] PlayerProgressSO ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default 2 ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß");

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏õ
        if (!sInited)
        {
            bool useTest = useTestInThisScene;
            sActiveCardsFolder = useTest ? cardsFolder_Test : cardsFolder;
            sActiveFusionPath  = useTest ? fusionPath_Test  : fusionPath;
            sInited = true;
        }

        LoadAllCards();
        LoadFusionTable();   // üÜï ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ü‡∏¥‡∏ß‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢
    }

    
    void LoadAllCards()
    {
        var folder = string.IsNullOrEmpty(sActiveCardsFolder) ? cardsFolder : sActiveCardsFolder;
        allCards = Resources.LoadAll<CardData>(folder).ToList();
        Debug.Log($"[CardManager] Loaded {allCards.Count} cards from Resources/{folder}");
    }
// ====== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÇ‡∏´‡∏•‡∏î CardFusionTable ======
    void LoadFusionTable()
    {
        var path = string.IsNullOrEmpty(sActiveFusionPath) ? fusionPath : sActiveFusionPath;

        // ‡∏ñ‡πâ‡∏≤ Inspector ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ã‡πá‡∏ï fusionTable ‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Resources
        if (fusionTable == null)
            fusionTable = Resources.Load<CardFusionTable>(path);

        // ‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î: ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ build map ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (fusionTable != null)
        {
            fusionTable.BuildMap();
            Debug.Log($"[CardManager] FusionTable loaded from Resources/{path}");
        }
        else
        {
            Debug.LogWarning($"[CardManager] ‡πÑ‡∏°‡πà‡∏û‡∏ö FusionTable ‡∏ó‡∏µ‡πà Resources/{path} (‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡πÉ‡∏ô Inspector ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)");
        }
    }
    // ==== ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ô/‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π ====
    // ====== ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ======
    public void UseTestMode(bool on)
    {
        sActiveCardsFolder = on ? cardsFolder_Test : cardsFolder;
        sActiveFusionPath  = on ? fusionPath_Test  : fusionPath;
        LoadAllCards();
        fusionTable = null;          // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Resources
        LoadFusionTable();
        UIManager.Instance?.UpdateCardSlots(heldCards);
    }
    void OnEnable()
    {
        SceneManager.sceneLoaded += OnSceneLoaded;
    }

    void OnDisable()
    {
        SceneManager.sceneLoaded -= OnSceneLoaded;
    }

    void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ UICardSelect ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Scene ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î
        uiSelect = FindObjectOfType<UICardSelect>(true);
    }

    private CardData GetWeightedRandomCard()
    {
        // 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° Category ‡∏ó‡∏µ‡πà‡∏°‡∏µ weight > 0
        var nonZeroCategories = categoryWeights
            .Where(cw => cw.weight > 0)
            .ToList();

        if (nonZeroCategories.Count == 0)
            return null;

        // 2) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏° weight ‡∏Ç‡∏≠‡∏á Category ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        int totalCategoryWeight = nonZeroCategories.Sum(cw => cw.weight);

        // 3) ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 - totalCategoryWeight-1
        int randCatValue = Random.Range(0, totalCategoryWeight);

        // 4) ‡∏´‡∏≤ Category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (First-fit)
        CardCategory chosenCategory = nonZeroCategories[0].category;
        int accumulated = 0;
        foreach (var cw in nonZeroCategories)
        {
            accumulated += cw.weight;
            if (randCatValue < accumulated)
            {
                chosenCategory = cw.category;
                break;
            }
        }

        // 5) ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô allCards ‡∏ï‡∏≤‡∏° chosenCategory
        var cardsInCategory = allCards
            .Where(cd =>
                cd.category == chosenCategory &&
                cd.weight > 0 &&
                (!cd.requirePurchase || PlayerProgressSO.Instance.HasCard(cd.id))   // üÜï
            )
            .ToList();

        if (cardsInCategory.Count == 0)
        {
            var pool = allCards.Where(cd => cd.category != CardCategory.FusionCard).ToList();
            return pool[Random.Range(0, pool.Count)];
        }

        // 6) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏° weight ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Category
        int totalCardWeight = cardsInCategory.Sum(cd => cd.weight);

        // 7) ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 0 - totalCardWeight-1
        int randCardValue = Random.Range(0, totalCardWeight);

        // 8) ‡∏´‡∏≤ CardData ‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (First-fit)
        int accCard = 0;
        foreach (var cd in cardsInCategory)
        {
            accCard += cd.weight;
            if (randCardValue < accCard)
                return cd;
        }

        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏Å‡∏´‡∏•‡πà‡∏ô (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á)
        return cardsInCategory[0];
    }


    private List<CardData> BuildThreeWeightedRandom()
    {
        var opts = new List<CardData>();
        int attempts = 0;
        while (opts.Count < 3 && attempts < 20)
        {
            var candidate = GetWeightedRandomCard();
            if (candidate != null && !opts.Contains(candidate))
            {
                opts.Add(candidate);
            }
            attempts++;
        }

        // ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 3 ‡πÉ‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏≤‡∏Å weight ‡∏à‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î) ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å allCards ‡∏õ‡∏Å‡∏ï‡∏¥
        while (opts.Count < 3)
        {
            var fallbackPool = allCards.Where(cd => cd.category != CardCategory.FusionCard).ToList();
            var fallback = fallbackPool[Random.Range(0, fallbackPool.Count)];
            if (!opts.Contains(fallback)) opts.Add(fallback);
        }

        return opts;
    }
    private void OnUseMasterDraft()
    {
        // ‡πÄ‡∏õ‡∏¥‡∏î UI MasterDraft ‡∏£‡∏±‡∏ö allCards ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        UIMasterDraft.Instance.Open(allCards, OnMasterDraftCardPicked);
    }
    private void OnMasterDraftCardPicked(CardData selected)
    {
        // ‡∏ô‡∏≥ CardData ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô heldCards ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (heldCards.Count < maxHeldCards)
        {
            heldCards.Add(selected);
        }
        else
        {
            // ‡∏Å‡∏£‡∏ì‡∏µ heldCards ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏´‡πâ Replace ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å index ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å slot ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô
            // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà index 0
            heldCards[0] = selected;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠ (‡πÄ‡∏ä‡πà‡∏ô UpdateCardSlots)
        UIManager.Instance.UpdateCardSlots(heldCards);

    }
    public void GiveRandomCard()
    {
        var opts = BuildThreeWeightedRandom();
        optionsQueue.Enqueue(opts);
        totalQueuedCount++;
        TryOpenNextSelection();
    }
    public void UpgradeMaxHeldCards(int newMax)
    {
        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 2‚Äì6 ‡∏ä‡πà‡∏≠‡∏á)
        maxHeldCards = Mathf.Clamp(newMax, 2, 6);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ UIManager ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Shop)
        if (UIManager.Instance != null)
        {
            UIManager.Instance.UpdateCardSlots(heldCards);
        }
    }
    private void TryOpenNextSelection()
    {
        if (uiSelect.IsOpen || isReplaceMode) return;
        if (optionsQueue.Count == 0) return;

        processedCount++;

        lastOptions = optionsQueue.Dequeue();
        uiSelect.Open(lastOptions, OnCardPicked);
    }

    private void OnCardPicked(CardData picked)
    {
        if (!isReplaceMode)
        {
            if (heldCards.Count < maxHeldCards)
            {
                heldCards.Add(picked);
                UIManager.Instance.UpdateCardSlots(heldCards);
            }
            else
            {
                pendingReplacementCard = picked;
                isReplaceMode = true;
                UIManager.Instance.UpdateCardSlots(heldCards, true);
                return;
            }
        }

        UIManager.Instance.UpdateCardSlots(heldCards);
        isReplaceMode = false;

        TryOpenNextSelection();
    }

    public void CancelReplacement()
    {
        if (!isReplaceMode) return;
        pendingReplacementCard = null;
        isReplaceMode = false;
        UIManager.Instance.HideMessage();
        UIManager.Instance.UpdateCardSlots(heldCards);

        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        uiSelect.Open(lastOptions, OnCardPicked);
    }

    public void ReplaceSlot(int index)
    {
        if (!isReplaceMode || pendingReplacementCard == null) return;
        heldCards[index] = pendingReplacementCard;
        pendingReplacementCard = null;
        isReplaceMode = false;

        UIManager.Instance.HideMessage();
        UIManager.Instance.UpdateCardSlots(heldCards);

        TryOpenNextSelection();
    }

    public void UseCard(int index)
    {
        if (index < 0 || index >= heldCards.Count) return;

        var card = heldCards[index];

        // 1) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à CanUseCard)
        UIConfirmPopup.Show(
            $"‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î '{card.displayName}' ({card.Mana} Mana)?",
            () =>
            {
                // ‚ñ∂ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (Confirm) ‡∏ñ‡∏π‡∏Å‡∏Å‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏ì ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç

                // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                if (!TurnManager.Instance.CanUseCard(card))
                {
                    UIManager.Instance.ShowMessage("‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", 2f);
                    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå)
                    heldCards.RemoveAt(index);
                    UIManager.Instance.UpdateCardSlots(heldCards);
                    return; // ‡∏£‡πâ‡∏≠‡∏á‡∏à‡∏ö ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
                }

                // 3) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏à‡∏∂‡∏á‡∏ï‡∏£‡∏ß‡∏à Mana ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
                int cost = card.Mana;
                if (!TurnManager.Instance.UseMana(cost))
                {
                    UIManager.Instance.ShowMessage($"Mana ‡πÑ‡∏°‡πà‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ {cost})", 2f);
                    return; // ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ)
                }

                // 4) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î
                ApplyEffect(card);

                // 5) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                TurnManager.Instance.OnCardUsed(card);

                // 6) ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
                heldCards.RemoveAt(index);
                UIManager.Instance.UpdateCardSlots(heldCards);
            },
            () =>
            {
                // ‚ñ∂ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (Cancel) ‡∏ñ‡∏π‡∏Å‡∏Å‡∏î: ‡∏Ñ‡∏∑‡∏ô Mana ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                // ‡πÅ‡∏ï‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏±‡∏Å Mana ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡πà‡∏≠‡∏ô confirm ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô
            }
        );
    }
    public bool TryFuseByIndex(int fromIndex, int toIndex)
    {
        if (fromIndex == toIndex) return false;
        if (fromIndex < 0 || fromIndex >= heldCards.Count ||
            toIndex   < 0 || toIndex   >= heldCards.Count)
        {
            UIManager.Instance.ShowMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ fusion ‡πÑ‡∏î‡πâ", 1.2f);
            return false;
        }

        var a = heldCards[fromIndex];
        var b = heldCards[toIndex];
        var result = (fusionTable != null) ? fusionTable.TryFuse(a, b) : null;

        if (result == null)
        {
            UIManager.Instance.ShowMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ fusion ‡πÑ‡∏î‡πâ", 1.2f);
            return false;
        }

        // ‡πÉ‡∏™‡πà‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡∏Å‡πÉ‡∏ö
        heldCards[toIndex] = result;
        heldCards.RemoveAt(fromIndex > toIndex ? fromIndex : fromIndex); // ‡∏•‡∏ö‡πÉ‡∏ö A ‡∏≠‡∏≠‡∏Å (index ‡∏Ç‡∏¢‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤ set ‡∏ä‡πà‡∏≠‡∏á B ‡πÅ‡∏•‡πâ‡∏ß)

        UIManager.Instance.UpdateCardSlots(heldCards);
        UIManager.Instance.ShowMessage($"Fusion: {a.displayName} + {b.displayName} ‚Üí {result.displayName}", 2f);
        return true;
    }
    public void MoveCard(int fromIndex, int toIndex)
    {
        if (fromIndex == toIndex) return;
        if (fromIndex < 0 || fromIndex >= heldCards.Count) return;
        if (toIndex < 0) return;

        var card = heldCards[fromIndex];
        heldCards.RemoveAt(fromIndex);

        if (toIndex > heldCards.Count) toIndex = heldCards.Count;
        heldCards.Insert(toIndex, card);

        UIManager.Instance.UpdateCardSlots(heldCards);
    }

    private void ApplyEffect(CardData card)
    {
        switch (card.effectType)
        {
            //Card 1.‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© letter ‡∏à‡∏≤‡∏Å x2 ‡πÄ‡∏õ‡πá‡∏ô x4
            case CardEffectType.LetterQuadSurge:
                ScoreManager.SetDoubleLetterOverride(4);   // ‡∏ö‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                UIManager.Instance.ShowMessage("‡∏ä‡πà‡∏≠‡∏á DL ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô x4 ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ô‡∏µ‡πâ!", 2);
                break;
            //Card 2.‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© letter ‡∏à‡∏≤‡∏Å x3 ‡πÄ‡∏õ‡πá‡∏ô x6
            case CardEffectType.LetterHexSurge:
                ScoreManager.SetDoubleLetterOverride(6);   // ‡∏ö‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                UIManager.Instance.ShowMessage("‡∏ä‡πà‡∏≠‡∏á DL ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô x6 ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ô‡∏µ‡πâ!", 2);
                break;
            //Card 3.‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© Word ‡∏à‡∏≤‡∏Å x2 ‡πÄ‡∏õ‡πá‡∏ô x4
            case CardEffectType.WordQuadSurge:
                ScoreManager.SetDoubleWordOverride(4);   // ‡∏ö‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                UIManager.Instance.ShowMessage("‡∏ä‡πà‡∏≠‡∏á DW ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô x4 ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ô‡∏µ‡πâ!", 2);
                break;
            //Card 4.‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© Word ‡∏à‡∏≤‡∏Å x3 ‡πÄ‡∏õ‡πá‡∏ô x6
            case CardEffectType.WordHexSurge:
                ScoreManager.SetDoubleWordOverride(6);   // ‡∏ö‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                UIManager.Instance.ShowMessage("‡∏ä‡πà‡∏≠‡∏á DW ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô x6 ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ô‡∏µ‡πâ!", 2);
                break;
            // Card 5.‡πÄ‡∏ï‡∏¥‡∏° Bench 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            case CardEffectType.TwinDraw:
                for (int i = 0; i < 2; i++)
                    BenchManager.Instance.RefillOneSlot();
                UIManager.Instance.ShowMessage("Twin Draw ‚Äì ‡πÄ‡∏ï‡∏¥‡∏° 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£!", 2);
                break;
            //Card 6.‡πÄ‡∏ï‡∏¥‡∏° Bench 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            case CardEffectType.QuadSupply:
                for (int i = 0; i < 4; i++)
                    BenchManager.Instance.RefillOneSlot();
                UIManager.Instance.ShowMessage("Quad Supply ‚Äì ‡πÄ‡∏ï‡∏¥‡∏° 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£!", 2);
                break;
            //Card 7.‡πÄ‡∏ï‡∏¥‡∏° Bench ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            case CardEffectType.BenchBlitz:
                BenchManager.Instance.RefillEmptySlots();
                UIManager.Instance.ShowMessage("Bench Blitz ‚Äì ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á!", 2);
                break;
            //Card 8.‡∏à‡∏±‡πà‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏° 2 ‡πÉ‡∏ö
            case CardEffectType.DoubleRecast:
                for (int i = 0; i < 2; i++)
                    GiveRandomCard();
                UIManager.Instance.ShowMessage(
                    "Pick new card", 2);
                break;
            //Card 9.x2 ‡∏Ñ‡∏≥‡πÉ‡∏ô Turn ‡∏ô‡∏±‡πâ‡∏ô
            case CardEffectType.EchoBurst:
                TurnManager.Instance.SetScoreMultiplier(2);
                UIManager.Instance.ShowMessage("Echo Burst! ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡∏Ñ‡∏π‡∏ì √ó2 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", 2);
                break;
            //Card 10.Full Rerack
            case CardEffectType.FullRerack:
                BenchManager.Instance.FullRerack();
                UIManager.Instance.ShowMessage("Full Rerack ‚Äî ‡∏™‡∏∏‡πà‡∏° Bench ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!", 2);
                break;

            //Card 11.Glyph Spark: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô Bench ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© 1 ‡∏ï‡∏±‡∏ß
            case CardEffectType.GlyphSpark:
                BenchManager.Instance.ReplaceRandomWithSpecial(1);
                UIManager.Instance.ShowMessage("Glyph Spark ‚Äî ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÉ‡∏ô Bench ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©!", 2);
                break;

            //Card 12.Twin Sparks: ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô Bench ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© 2 ‡∏ï‡∏±‡∏ß
            case CardEffectType.TwinSparks:
                BenchManager.Instance.ReplaceRandomWithSpecial(2);
                UIManager.Instance.ShowMessage("Twin Sparks ‚Äî ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÉ‡∏ô Bench ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©!", 2);
                break;
            // Card 13. Free Pass ‚Äì ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å penalty ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ
            case CardEffectType.FreePass:
                TurnManager.Instance.ApplyFreePass();
                break;

            // Card 14. Minor Infusion ‚Äì ‡πÄ‡∏û‡∏¥‡πà‡∏° Mana 2 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
            case CardEffectType.MinorInfusion:
                TurnManager.Instance.AddMana(2);
                break;

            // Card 15. Major Infusion ‚Äì ‡πÄ‡∏û‡∏¥‡πà‡∏° Mana 5 ‡∏´‡∏ô‡πà‡∏ß‡∏¢
            case CardEffectType.MajorInfusion:
                TurnManager.Instance.AddMana(5);
                break;

            // Card 16. Mana Overflow ‚Äì ‡πÄ‡∏ï‡∏¥‡∏° Mana ‡∏à‡∏ô‡πÄ‡∏ï‡πá‡∏° (maxMana)
            case CardEffectType.ManaOverflow:
                TurnManager.Instance.AddMana(TurnManager.Instance.maxMana);
                break;
            // 17. Wild Bloom ‚Äì ‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô Board ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 10 ‡∏ä‡πà‡∏≠‡∏á
            case CardEffectType.WildBloom:
                BoardManager.Instance.AddRandomSpecialSlots(10);
                UIManager.Instance.ShowMessage("Wild Bloom ‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° 10 ‡∏ä‡πà‡∏≠‡∏á!", 2f);
                break;

            // 18. Chaos Bloom ‚Äì ‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô Board ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 25 ‡∏ä‡πà‡∏≠‡∏á
            case CardEffectType.ChaosBloom:
                BoardManager.Instance.AddRandomSpecialSlots(25);
                UIManager.Instance.ShowMessage("Chaos Bloom ‚Äî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° 25 ‡∏ä‡πà‡∏≠‡∏á!", 2f);
                break;

            // 19. Targeted Flux ‚Äì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á 5 ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
            case CardEffectType.TargetedFlux:
                BoardManager.Instance.StartTargetedFlux(5);
                UIManager.Instance.ShowMessage("Targeted Flux ‚Äî ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 5 ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©!", 2f);
                break;

            // 20. Clean Slate ‚Äì ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Board
            case CardEffectType.CleanSlate:
                BoardManager.Instance.CleanSlate();
                UIManager.Instance.ShowMessage("Clean Slate ‚Äî ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô!", 2f);
                break;
            // 21. LetterDoubleTime ‚Äì ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô x2 ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            case CardEffectType.GlobalEcho:
                // multiplier=2, duration=60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                ScoreManager.ActivateGlobalLetterMultiplier(2, 60f);
                UIManager.Instance.ShowMessage("Letter Double Time ‚Äì ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î √ó2 ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ!", 2f);
                break;

            // 22. AllRandomSpecialTime ‚Äì ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô special ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            case CardEffectType.PandemoniumField:
                BoardManager.Instance.ActivateAllRandomSpecial(60f);
                // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ActivateAllRandomSpecial() ‡πÅ‡∏•‡πâ‡∏ß
                break;

            // 23. ResetCardUsage ‚Äì ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ
            case CardEffectType.CardRefresh:
                TurnManager.Instance.ResetCardUsage();
                // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ResetCardUsage() ‡πÅ‡∏•‡πâ‡∏ß
                break;
            // 24. InfiniteTiles (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å tilepack ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î) 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            case CardEffectType.InfiniteTiles:
                TileBag.Instance.ActivateInfinite(60f);
                UIManager.Instance.ShowMessage("Infinite Tiles ‚Äì tilepack ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î 1 ‡∏ô‡∏≤‡∏ó‡∏µ!", 2f);
                break;

            // 25. PackRenewal (‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï tilepack)
            case CardEffectType.PackRenewal:
                TileBag.Instance.ResetPool();
                UIManager.Instance.ShowMessage("Pack Renewal ‚Äì ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï tilepack ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!", 2f);
                break;

            // 26. ManaInfinity (‡∏°‡∏≤‡∏ô‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î) 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            case CardEffectType.ManaInfinity:
                TurnManager.Instance.ActivateInfiniteMana(60f);
                // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ActivateInfiniteMana()
                break;

            // 27. OmniSpark (bench ‡πÄ‡∏õ‡πá‡∏ô special ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
            case CardEffectType.OmniSpark:
                BenchManager.Instance.OmniSpark();
                UIManager.Instance.ShowMessage("Omni Spark ‚Äì ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô Bench ‡πÄ‡∏õ‡πá‡∏ô special ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß!", 2f);
                break;
            // 28. MasterDraft ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏Å‡πÄ‡∏ß‡πà‡πâ‡∏ô widecard
            case CardEffectType.MasterDraft:
                OnUseMasterDraft();
                break;
        }
    }
}
