using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class LevelManager : MonoBehaviour
{
    public static LevelManager Instance { get; private set; }

    [Header("Configs")]
    public LevelConfig[] levels;

    [Header("UI (‡∏ú‡∏π‡∏Å‡πÉ‡∏ô Inspector)")]
    public TMP_Text levelText;
    public TMP_Text timerText;         // ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-Remove
    public TMP_Text levelTimerText;    // ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô (‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î = ‡πÅ‡∏û‡πâ)

    public int CurrentLevel => currentLevel;

    int currentLevel;
    bool timerStarted;
    bool timing;
    bool isGameOver = false;

    float levelTimeLimit;
    float levelTimeElapsed;
    bool levelTimerRunning;

    Coroutine autoRemoveCoroutine;

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
    }

    void Start()
    {
        if (levels == null || levels.Length == 0)
        {
            Debug.LogError("‚ùå No level configuration provided!");
            return;
        }

        SetupLevel(0);
    }

    public bool IsGameOver()
    {
        return isGameOver;
    }

    void Update()
    {
        if (isGameOver) return;

        var cfg = levels[currentLevel];

        // üïí ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏´‡∏•‡∏±‡∏Å
        if (levelTimerRunning)
        {
            levelTimeElapsed += Time.deltaTime;
            float remaining = Mathf.Max(0, levelTimeLimit - levelTimeElapsed);
            UpdateLevelTimerText(remaining);

            if (remaining <= 0f)
            {
                levelTimerRunning = false;
                GameOver(false); // ‚ùå ‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            }
        }

        // ‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô
        if (!isGameOver && TurnManager.Instance.Score >= cfg.requiredScore &&
            TurnManager.Instance.CheckedWordCount >= cfg.requiredWords)
        {
            AnnounceLevelComplete();
            NextLevel();
        }
    }

    void SetupLevel(int idx)
    {
        currentLevel = idx;
        timerStarted = false;
        timing = levels[idx].enableAutoRemove;

        levelText.text = $"Level {levels[idx].levelIndex}";
        timerText.gameObject.SetActive(false);

        // üîÅ ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô
        levelTimeElapsed = 0f;
        levelTimeLimit = levels[idx].timeLimit;
        levelTimerRunning = false;
        UpdateLevelTimerText(levelTimeLimit);

        // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô + ‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏°‡πà
        BoardManager.Instance.GenerateBoard();
        TurnManager.Instance.ResetForNewLevel();
        // a) ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï TileBag ‡∏ï‡∏≤‡∏° Progress (190/200 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á)
        TileBag.Instance.RefillTileBag();
        // b) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ñ‡∏∏‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡πà‡∏ß
        TurnManager.Instance.UpdateBagUI();
        // c) ‡∏à‡∏±‡πà‡∏ß‡∏•‡∏á Bench (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 190)
        BenchManager.Instance.RefillEmptySlots();
        // d) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå
        TurnManager.Instance.UpdateBagUI();

        Debug.Log($"‚ñ∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πà‡∏≤‡∏ô {levels[idx].levelIndex} | ‡πÄ‡∏ß‡∏•‡∏≤: {levels[idx].timeLimit}s | Score: {levels[idx].requiredScore}");
    }

    public void OnFirstConfirm()
    {
        if (!timerStarted && timing)
        {
            timerStarted = true;
            timerText.gameObject.SetActive(true);
            StartAutoRemoveLoop(levels[currentLevel].autoRemoveInterval);
            Debug.Log("‚è±Ô∏è Auto-remove Timer started");
        }

        if (!levelTimerRunning && levelTimeLimit > 0)
        {
            levelTimerRunning = true;
            levelTimeElapsed = 0f;
            Debug.Log("üïí Level timer started");
        }
    }

    public void ResetTimer()
    {
        if (autoRemoveCoroutine != null)
        {
            StopCoroutine(autoRemoveCoroutine);
        }
        timerText.text = levels[currentLevel].autoRemoveInterval.ToString("0.0") + "s";
        StartAutoRemoveLoop(levels[currentLevel].autoRemoveInterval);
    }

    void StartAutoRemoveLoop(float interval)
    {
        if (autoRemoveCoroutine != null)
            StopCoroutine(autoRemoveCoroutine);

        autoRemoveCoroutine = StartCoroutine(AutoRemoveRoutine(interval));
    }

    IEnumerator AutoRemoveRoutine(float interval)
    {
        while (!isGameOver)
        {
            float countdown = interval;
            while (countdown > 0f && !isGameOver)
            {
                countdown -= Time.deltaTime;
                timerText.text = countdown.ToString("0.0") + "s";
                yield return null;
            }

            if (!isGameOver)
            {
                TurnManager.Instance.AutoRemoveNow();
                Debug.Log("üîÅ Auto-remove triggered");
            }
        }
    }

    void NextLevel()
    {
        Debug.Log($"[LevelManager] NextLevel: currentLevel={currentLevel}, levels.Length={levels.Length}");

        if (currentLevel + 1 < levels.Length)
        {
            SetupLevel(currentLevel + 1);
        }
        else
        {
            GameOver(true); // ‚úÖ ‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
        }
    }

    void GameOver(bool win)
    {
        if (isGameOver) return;

        isGameOver = true;
        timerStarted = false;
        levelTimerRunning = false;

        if (autoRemoveCoroutine != null)
            StopCoroutine(autoRemoveCoroutine);

        timerText.gameObject.SetActive(false);
        levelTimerText.color = win ? Color.green : Color.red;

        if (win)
            Debug.Log("üéâ ‡∏ä‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏î‡πà‡∏≤‡∏ô");
        else
            Debug.Log("üíÄ ‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤");

        // TODO: ‡πÅ‡∏™‡∏î‡∏á GameOverPanel
    }

    void UpdateLevelTimerText(float remaining)
    {
        int minutes = Mathf.FloorToInt(remaining / 60f);
        int seconds = Mathf.FloorToInt(remaining % 60f);
        levelTimerText.text = $"üïí {minutes:00}:{seconds:00}";
    }

    void AnnounceLevelComplete()
    {
        Debug.Log($"‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô {levels[currentLevel].levelIndex}!");
    }
}