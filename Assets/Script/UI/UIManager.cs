using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

/// <summary>
/// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ UI ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: GameWin, LevelFail, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
/// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Card Slots + Replace Mode
/// ‡πÅ‡∏•‡∏∞ (‡πÉ‡∏´‡∏°‡πà) Garbled IT UI ‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô 1 / ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô 2
/// </summary>
public class UIManager : MonoBehaviour
{
    public static UIManager Instance { get; private set; }

    [Header("Panels")]
    public GameObject gameWinPanel;
    public GameObject levelFailPanel;

    [Header("Message Popup")]
    [SerializeField] private GameObject popupPanel;   // MessagePopup Panel
    [SerializeField] private TMP_Text messageText;    // MessageText
    [SerializeField] private float displayTime = 2f;  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á popup (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    private Coroutine hideRoutine;

    [Header("Card Slots")]
    [SerializeField] private List<Button> cardSlotButtons;  // ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î/‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
    [SerializeField] private List<Image>  cardSlotIcons;    // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á

    [Header("Replace Mode")]
    [SerializeField] private Button cancelReplacementButton; // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î

    [Header("Replace Mode Prompt")]
    [SerializeField] private TMP_Text replaceModePromptText;

    // ===== NEW: Level 1 ‚Äì Garbled IT UI =====
    [Header("Level 1 ‚Äì Garbled IT UI")]
    [SerializeField] private GameObject garbledPanel;         // ‡πÅ‡∏ú‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥ IT
    [SerializeField] private TMP_InputField garbledInput;     // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥
    [SerializeField] private Button garbledSubmitButton;      // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏î‡∏≤

    // ===== NEW: Level 2 ‚Äì Triangle hint (optional label) =====
    [Header("Level 2 ‚Äì Triangle Objective (optional)")]
    [SerializeField] private TMP_Text triangleHintText;       // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ: ‡πÇ‡∏ä‡∏ß‡πå Connected/Not connected

    void Awake()
    {
        if (Instance == null) Instance = this;
        else { Destroy(gameObject); return; }

        if (popupPanel != null) popupPanel.SetActive(false);

        // ‡∏ã‡πà‡∏≠‡∏ô card slots ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏±‡∏ô NPE ‡∏ñ‡πâ‡∏≤ list ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ã‡πá‡∏ï)
        if (cardSlotButtons != null)
            foreach (var btn in cardSlotButtons) if (btn) btn.gameObject.SetActive(false);

        // ‡∏ï‡∏±‡πâ‡∏á callback ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Replace Mode
        if (cancelReplacementButton != null)
        {
            cancelReplacementButton.onClick.RemoveAllListeners();
            cancelReplacementButton.onClick.AddListener(() =>
            {
                if (CardManager.Instance != null)
                    CardManager.Instance.CancelReplacement();
            });
            cancelReplacementButton.gameObject.SetActive(false);
        }
        if (replaceModePromptText != null)
            replaceModePromptText.gameObject.SetActive(false);

        // ===== wire Garbled IT UI =====
        if (garbledPanel != null) garbledPanel.SetActive(false);
        if (garbledSubmitButton != null)
        {
            garbledSubmitButton.onClick.RemoveAllListeners();
            garbledSubmitButton.onClick.AddListener(SubmitGarbledGuess);
        }

        // triangle hint label ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)
        if (triangleHintText != null) triangleHintText.gameObject.SetActive(false);
    }

    /// <summary>‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°</summary>
    public void ShowGameWin()
    {
        if (gameWinPanel != null) gameWinPanel.SetActive(true);
    }

    /// <summary>‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô</summary>
    public void ShowLevelFail()
    {
        if (levelFailPanel != null) levelFailPanel.SetActive(true);
    }

    /// <summary>‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô Popup ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô</summary>
    public void ShowMessageDictionary(string message)
    {
        ShowMessage(message, displayTime);
    }

    /// <summary>‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏≤‡∏ô‡∏ï‡∏≤‡∏° seconds ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (seconds<=0 ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞ HideMessage)</summary>
    public void ShowMessage(string message, float seconds)
    {
        if (messageText == null || popupPanel == null) return;

        if (hideRoutine != null) StopCoroutine(hideRoutine);

        messageText.text = message;
        popupPanel.SetActive(true);
        if (seconds > 0f)
            hideRoutine = StartCoroutine(HideAfterDelay(seconds));
    }

    /// <summary>‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° popup ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</summary>
    public void HideMessage()
    {
        if (hideRoutine != null) StopCoroutine(hideRoutine);
        if (popupPanel != null) popupPanel.SetActive(false);
    }

    private IEnumerator HideAfterDelay(float seconds)
    {
        yield return new WaitForSeconds(seconds);
        if (popupPanel != null) popupPanel.SetActive(false);
    }

    /// <summary>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Card Slot UI; ‡∏ñ‡πâ‡∏≤ replaceMode=true ‡∏à‡∏∞‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ReplaceSlot()</summary>
    public void UpdateCardSlots(List<CardData> cards, bool replaceMode = false)
    {
        if (cardSlotButtons == null || cardSlotIcons == null) return;

        // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Replace Mode
        if (cancelReplacementButton != null)
            cancelReplacementButton.gameObject.SetActive(replaceMode);

        if (replaceModePromptText != null)
        {
            replaceModePromptText.gameObject.SetActive(replaceMode);
            if (replaceMode) replaceModePromptText.text = "Chose card";
        }

        for (int i = 0; i < cardSlotButtons.Count; i++)
        {
            var btn   = cardSlotButtons[i];
            var icon  = (i < cardSlotIcons.Count) ? cardSlotIcons[i] : null;
            if (btn == null || icon == null) continue;

            var hover = btn.GetComponent<CardSlotUI>();
            int index = i; // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ

            if (cards != null && i < cards.Count && cards[i] != null)
            {
                var data = cards[i];

                // ‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å
                icon.sprite  = data.icon;
                icon.enabled = true;
                btn.gameObject.SetActive(true);

                // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Slot (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hover ‡πÅ‡∏•‡∏∞ drop)
                if (hover != null)
                {
                    hover.cardInSlot = data;
                    hover.slotIndex  = index;
                }

                // üÜï ‡∏ú‡∏π‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏≤‡∏Å
                var drag = icon.GetComponent<CardDraggable>();
                if (drag == null) drag = icon.gameObject.AddComponent<CardDraggable>();
                drag.SetData(index, data); // ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏∞‡πÑ‡∏£

                // ‡∏Ñ‡∏•‡∏¥‡∏Å (‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°)
                btn.onClick.RemoveAllListeners();
                if (replaceMode)
                    btn.onClick.AddListener(() => CardManager.Instance.ReplaceSlot(index));
                else
                    btn.onClick.AddListener(() => CardManager.Instance.UseCard(index));
            }
            else
            {
                btn.gameObject.SetActive(false);
                if (hover != null)
                {
                    hover.cardInSlot = null;
                    hover.slotIndex  = index; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ drop ‡πÉ‡∏™‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                }
                var drag = icon.GetComponent<CardDraggable>();
                if (drag != null) drag.SetData(index, null);
            }
        }
    }

    // ======== NEW: Garbled IT UI controls (Lv1) ========

    /// <summary>‡πÉ‡∏´‡πâ LevelManager ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏á‡πÄ‡∏î‡∏≤‡∏Ñ‡∏≥ IT ‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô 1</summary>
    public void ShowGarbledUI(bool show)
    {
        if (garbledPanel != null) garbledPanel.SetActive(show);
        if (show && garbledInput != null) garbledInput.text = "";
    }

    /// <summary>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏î‡∏≤‡∏Ñ‡∏≥ IT (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÅ‡∏ú‡∏á)</summary>
    public void SubmitGarbledGuess()
    {
        if (LevelManager.Instance == null) return;

        string guess = garbledInput != null ? garbledInput.text : "";
        if (string.IsNullOrWhiteSpace(guess))
        {
            ShowMessage("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥ IT ‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Confirm", 1.2f);
            return;
        }

        bool ok = LevelManager.Instance.Level1_SubmitFixGuess(guess);
        if (ok)
        {
            ShowMessage($"‚úî \"{guess}\" ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏•‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", 2f);
            if (garbledInput) garbledInput.text = "";
        }
        else
        {
            ShowMessage($"‚úñ \"{guess}\" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥ IT", 1.5f);
        }
    }

    // ======== NEW: Triangle hint (Lv2) ‚Äì optional ========

    /// <summary>‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î label ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Triangle objective (‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡∏Å‡πÑ‡∏ß‡πâ)</summary>
    public void SetTriangleHintVisible(bool show)
    {
        if (triangleHintText == null) return;
        triangleHintText.gameObject.SetActive(show);
    }

    /// <summary>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Triangle objective (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô indicator ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà)</summary>
    public void UpdateTriangleHint(bool connected)
    {
        if (triangleHintText == null) return;
        triangleHintText.gameObject.SetActive(true);
        triangleHintText.text  = connected ? "Triangle: Connected" : "Triangle: Not connected";
        triangleHintText.color = connected ? new Color32(0,180,60,255) : new Color32(220,60,40,255);
    }
}
