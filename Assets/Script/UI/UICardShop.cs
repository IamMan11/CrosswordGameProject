using System.Collections.Generic;
using System.Collections;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UICardShop : MonoBehaviour
{
    [Header("Slots ‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á")]
    [SerializeField] List<CardShopSlotUI> slots = new();

    [Header("‡∏õ‡∏∏‡πà‡∏° Reroll")]
    [SerializeField] Button rerollBtn;
    [Header("Message Popup")]
    [SerializeField] GameObject popupPanel;   // ‡∏•‡∏≤‡∏Å Panel ‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
    [SerializeField] TMP_Text messageText;  // ‡∏•‡∏≤‡∏Å Text ‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô Panel
    [SerializeField] float displayTime = 2f;
    Coroutine hideCo;

    void Awake()
    {
        if (rerollBtn) rerollBtn.onClick.AddListener(Reroll);

        // üÜï ‡∏ï‡∏£‡∏ß‡∏à & Bootstrap CardManager
        if (popupPanel) popupPanel.SetActive(false);
        EnsureCardManagerExists();
    }
    void EnsureCardManagerExists()
    {
        if (CardManager.Instance != null) return;

        var go = new GameObject("CardManager (Auto)");
        var cm = go.AddComponent<CardManager>();

        cm.SendMessage("LoadAllCards");   // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô LoadAllCards() ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô public ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á ‡πÜ
    }
    void OnEnable() => Reroll();

    /* ---------- Reroll ---------- */
    void Reroll()
    {
        Debug.Log($"‚ñ∫ allCards = {CardManager.Instance.allCards.Count}");
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠"
        var pool = CardManager.Instance.allCards
                .Where(cd => cd.requirePurchase &&
                             !PlayerProgressSO.Instance.HasCard(cd.id))
                .OrderBy(_ => Random.value)
                .ToList();
        Debug.Log($"‚ñ∫ pool (‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ) = {pool.Count}");

        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á
        for (int i = 0; i < slots.Count; i++)
        {
            if (i < pool.Count)
            {
                slots[i].gameObject.SetActive(true);
                slots[i].Setup(pool[i], false, TryBuy);
            }
            else
            {
                slots[i].gameObject.SetActive(false);
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≤‡∏¢ ‡∏õ‡∏¥‡∏î Reroll
        if (rerollBtn) rerollBtn.interactable = pool.Count > 0;
    }

    /* ---------- ‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î ---------- */
    void TryBuy(CardData cd)
    {
        if (!CurrencyManager.Instance.Spend(cd.price))
        {
            ShowMessage("‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠");
            return;
        }

        PlayerProgressSO.Instance.AddCard(cd.id);
        ShowMessage($"‡∏ã‡∏∑‡πâ‡∏≠ {cd.displayName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        Reroll();
    }
    void ShowMessage(string msg)
    {
        if (popupPanel == null || messageText == null)
        {
            Debug.LogWarning($"[UICardShop] {msg}");   // fallback
            return;
        }

        if (hideCo != null) StopCoroutine(hideCo);

        messageText.text = msg;
        popupPanel.SetActive(true);
        hideCo = StartCoroutine(HideAfterDelay());
    }
    IEnumerator HideAfterDelay()
    {
        yield return new WaitForSeconds(displayTime);
        popupPanel.SetActive(false);
    }
}
