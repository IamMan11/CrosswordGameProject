using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class UIMasterDraft : MonoBehaviour
{
    public static UIMasterDraft Instance { get; private set; }

    [Header("Root Panel")]
    [SerializeField] private GameObject rootPanel;

    [Header("Category Buttons (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° CardCategory)")]
    [SerializeField] private Button btnBuff;
    [SerializeField] private Button btnDispell;
    [SerializeField] private Button btnNeutral;
    // (‡πÄ‡∏û‡∏¥‡πà‡∏° Button ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)

    [Header("Pre-created Card Slots")]
    [Tooltip("‡∏•‡∏≤‡∏Å GameObject ‡∏Ç‡∏≠‡∏á Slot UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (6 slot) ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô List ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")]
    [SerializeField] private List<GameObject> cardSlotList = new List<GameObject>();

    [Header("Pagination Controls")]
    [SerializeField] private Button btnPrevPage;
    [SerializeField] private Button btnNextPage;
    [SerializeField] private TMP_Text pageIndicatorText;

    // ‚îÄ‚îÄ‚îÄ internal data ‚îÄ‚îÄ‚îÄ
    private List<CardData> filteredCards = new List<CardData>();
    private int currentPage = 0;
    private const int cardsPerPage = 6;

    public delegate void OnCardSelectedDelegate(CardData card);
    private OnCardSelectedDelegate onCardSelectedCallback;

    void Awake()
    {
        if (Instance == null) Instance = this;
        else { Destroy(gameObject); return; }
        rootPanel.SetActive(false);
    }

    void Start()
    {
        // ‡∏ú‡∏π‡∏Å‡∏õ‡∏∏‡πà‡∏° Category ‡πÅ‡∏•‡∏∞ Pagination
        btnBuff.onClick.AddListener(() => OnCategoryButtonClicked(CardCategory.Buff));
        btnDispell.onClick.AddListener(() => OnCategoryButtonClicked(CardCategory.Dispell));
        btnNeutral.onClick.AddListener(() => OnCategoryButtonClicked(CardCategory.Neutral));
        btnPrevPage.onClick.AddListener(OnPrevPage);
        btnNextPage.onClick.AddListener(OnNextPage);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô List cardSlotList ‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö cardsPerPage (6) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (cardSlotList.Count != cardsPerPage)
        {
            Debug.LogWarning($"[UIMasterDraft] ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ Slot UI ‡πÉ‡∏ô cardSlotList ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {cardsPerPage} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡∏û‡∏ö {cardSlotList.Count}");
        }
    }

    /// <summary>
    /// ‡πÄ‡∏õ‡∏¥‡∏î MasterDraft UI ‡∏û‡∏£‡πâ‡∏≠‡∏° callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    /// </summary>
    public void Open(List<CardData> allCards, OnCardSelectedDelegate callback)
    {
        filteredCards = allCards
            .Where(cd => cd.category != CardCategory.Wildcard
                    && cd.category != CardCategory.FusionCard)   // üÜï
            .OrderBy(cd => cd.category)
            .ToList();

        onCardSelectedCallback = callback;
        currentPage = 0;
        rootPanel.SetActive(true);

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Category ‡πÅ‡∏£‡∏Å (Buff)
        OnCategoryButtonClicked(CardCategory.Buff);
    }

    /// <summary>
    /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î
    /// </summary>
    private void OnCategoryButtonClicked(CardCategory category)
    {
        filteredCards = CardManager.Instance.allCards
            .Where(cd => cd.category == category
                    && cd.category != CardCategory.Wildcard
                    && cd.category != CardCategory.FusionCard)   // üÜï
            .ToList();

        currentPage = 0;
        RefreshCardGrid();
    }

    /// <summary>
    /// ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ currentPage ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ cardSlotList ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    /// </summary>
    private void RefreshCardGrid()
    {
        int totalPages = Mathf.CeilToInt((float)filteredCards.Count / cardsPerPage);
        totalPages = Mathf.Max(totalPages, 1);

        // Clamp currentPage ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô [0, totalPages-1]
        currentPage = Mathf.Clamp(currentPage, 0, totalPages - 1);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        int startIdx = currentPage * cardsPerPage;
        int count = Mathf.Min(cardsPerPage, filteredCards.Count - startIdx);

        // ‡∏ß‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ slot ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
        for (int slotIndex = 0; slotIndex < cardsPerPage; slotIndex++)
        {
            GameObject slotGO = cardSlotList[slotIndex];
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏¢‡πà‡∏≠‡∏¢ (Icon, Name, Button) ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Slot ‡∏ô‡∏µ‡πâ
            var iconImg = slotGO.transform.Find("Icon").GetComponent<Image>();
            var nameTxt = slotGO.transform.Find("Name").GetComponent<TMP_Text>();
            var btn = slotGO.GetComponent<Button>();

            // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏•‡∏ö Listener ‡πÄ‡∏Å‡πà‡∏≤
            btn.onClick.RemoveAllListeners();

            if (slotIndex < count)
            {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≤‡∏Å filteredCards
                var cd = filteredCards[startIdx + slotIndex];
                slotGO.SetActive(true);

                // ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ Icon ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
                iconImg.sprite = cd.icon;
                nameTxt.text = cd.displayName;

                // ‡∏ú‡∏π‡∏Å Callback ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
                btn.onClick.AddListener(() => OnCardSlotClicked(cd));
            }
            else
            {
                // ‡∏ñ‡πâ‡∏≤ slotIndex ‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô Slot ‡∏ô‡∏µ‡πâ
                slotGO.SetActive(false);
            }
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        pageIndicatorText.text = $"Page {currentPage + 1}/{totalPages}";

        // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Prev/Next ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤
        btnPrevPage.interactable = (currentPage > 0);
        btnNextPage.interactable = (currentPage < totalPages - 1);
    }

    private void OnPrevPage()
    {
        currentPage--;
        RefreshCardGrid();
    }

    private void OnNextPage()
    {
        currentPage++;
        RefreshCardGrid();
    }

    /// <summary>
    /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô slot ‡πÉ‡∏î slot ‡∏´‡∏ô‡∏∂‡πà‡∏á
    /// </summary>
    private void OnCardSlotClicked(CardData cd)
    {
        rootPanel.SetActive(false);
        onCardSelectedCallback?.Invoke(cd);
    }

    /// <summary>
    /// ‡∏õ‡∏¥‡∏î MasterDraft UI (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)
    /// </summary>
    public void Close()
    {
        rootPanel.SetActive(false);
    }
}
