// GameplayTutorialConfig.cs
using UnityEngine;
using UnityEngine.UI;

public class GameplayTutorialConfig : MonoBehaviour
{
    [Header("Targets (‡∏•‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô‡∏°‡∏≤‡πÉ‡∏™‡πà)")]
    public RectTransform rackFirstLetter;   // ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏ñ‡∏∑‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô)
    public RectTransform boardArea;         // RectTransform ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ)
    public Button confirmButton;            // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô/‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°

    [Header("Run options")]
    public bool runOnlyOnFirstPlay = true;  // true = ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å

    void Awake()
    {
        // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        if (runOnlyOnFirstPlay && PlayerPrefs.GetInt("TUT_GAMEPLAY_DONE", 0) == 1) return;

        var tm = TutorialManager.Instance;
        if (tm == null)
        {
            Debug.LogError("[GameplayTutorialConfig] ‡πÑ‡∏°‡πà‡∏û‡∏ö TutorialManager ‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô");
            return;
        }

        // bind confirm ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå
        if (confirmButton) tm.confirmButton = confirmButton;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πÄ‡∏ï‡πá‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡πÑ‡∏•‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô Inspector)
        var intro = new TutorialManager.Step
        {
            id = "gp_intro",
            message = "‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏•‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏Å‡∏±‡∏ô!\n‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡πà‡∏≠",
            useCharacter = true,
            tapAnywhereToContinue = true,
            blockInput = true,                  // ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            showSpotlightOnAllowed = false      // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÑ‡∏´‡∏ô
        };

        var place = new TutorialManager.Step
        {
            id = "gp_place_letter",
            message = "‡∏•‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n‡πÑ‡∏õ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô (‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏™‡∏ß‡πà‡∏≤‡∏á)",
            useCharacter = true,
            blockInput = true,                  // ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≠
            tapAnywhereToContinue = false,      // ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°
            waitFor = TutorialManager.WaitType.TilePlacedOnBoard, // ‡∏£‡∏≠‡∏ß‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            highlightTarget = rackFirstLetter,  // ‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            allowClickOnHighlight = true,       // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            allowClickExtraRects = new RectTransform[] { boardArea }, // ‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏•‡πà‡∏≠‡∏¢/‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
            allowClickPadding = 24f,
            showSpotlightOnAllowed = true       // ‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ rackFirstLetter + boardArea
        };

        var confirm = new TutorialManager.Step
        {
            id = "gp_confirm",
            message = "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö",
            useCharacter = true,
            blockInput = true,
            tapAnywhereToContinue = false,
            waitFor = TutorialManager.WaitType.ConfirmPressed,     // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
            highlightTarget = confirmButton ? confirmButton.GetComponent<RectTransform>() : null,
            allowClickOnHighlight = true,       // ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            allowClickExtraRects = null,
            showSpotlightOnAllowed = true
        };

        var done = new TutorialManager.Step
        {
            id = "gp_done",
            message = "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏∏‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üéâ",
            useCharacter = true,
            blockInput = false,                 // ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
            tapAnywhereToContinue = true,
            showSpotlightOnAllowed = false
        };

        tm.steps = new TutorialManager.Step[] { intro, place, confirm, done };

        // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ overlay ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏î‡∏≥‡∏≠‡πà‡∏≠‡∏ô‚Äù ‡πÅ‡∏•‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        tm.forceTutorial = true;
        tm.startOnAwake = true;
        tm.skipIfAlreadyDone = false;
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô TutorialManager ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏¥‡∏î public ‡πÑ‡∏ß‡πâ: tm.overlayTargetAlpha = 0.78f;

        // ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß mark ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏±‡∏ô‡∏ß‡∏ô‡∏ã‡πâ‡∏≥) ‚Äî ‡∏à‡∏∞‡∏ó‡∏≥‡∏ï‡∏≠‡∏ô Finish ‡∏Å‡πá‡πÑ‡∏î‡πâ
        TutorialManager.OnTutorialFinished += () =>
        {
            PlayerPrefs.SetInt("TUT_GAMEPLAY_DONE", 1);
            PlayerPrefs.Save();
        };
    }
}
