using System.Collections.Generic;
using UnityEngine;

[System.Serializable]          // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö Inspector
public class LetterCount
{
    public LetterData data;    // Sprite / ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Ø‡∏•‡∏Ø
    [Range(1, 99)]
    public int count = 1;      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏•‡∏á‡∏ñ‡∏∏‡∏á
}

public class TileBag : MonoBehaviour
{
    public static TileBag Instance { get; private set; }

    [Header("Setup (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô = 100)")]
    public List<LetterCount> initialLetters = new();   // ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ A‚ÄëZ ‡∏ï‡∏≤‡∏°‡πÉ‡∏à

    private readonly List<LetterData> pool = new();    // ‡∏ñ‡∏∏‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡∏±‡∏ß

    public int TotalInitial { get; private set; }      // 100
    public int Remaining => pool.Count;              // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ñ‡∏∏‡∏á
    int drawsSinceSpecial = 0;

    void Awake()
    {
        if (Instance == null) Instance = this;
        else { Destroy(gameObject); return; }

        foreach (var lc in initialLetters)
        {
            TotalInitial += lc.count;
            for (int i = 0; i < lc.count; i++) pool.Add(lc.data);
        }

        if (TotalInitial != 100)
            Debug.LogWarning($"[TileBag] ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏ß‡∏° {TotalInitial} ‡∏ï‡∏±‡∏ß (‡∏Ñ‡∏ß‡∏£ = 100)");
    }

    /// <summary>‡∏î‡∏∂‡∏á‡∏™‡∏∏‡πà‡∏° 1 ‡∏ï‡∏±‡∏ß (‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏Ñ‡∏∑‡∏ô null)</summary>

    public LetterData DrawRandomTile()
    {
        if (pool.Count == 0) return null;

        // 1) ‡∏´‡∏¢‡∏¥‡∏ö template
        int idx = Random.Range(0, pool.Count);
        var template = pool[idx];
        pool.RemoveAt(idx);

        // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÅ‡∏ä‡∏£‡πå obj)
        LetterData data = new LetterData
        {
            letter = template.letter,
            sprite = template.sprite,
            score = template.score,
            isSpecial = false
        };

        // 3) ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏∏‡∏Å ‡πÜ 6 draw
        drawsSinceSpecial++;
        if (drawsSinceSpecial >= 6)
        {
            data.isSpecial = true;
            drawsSinceSpecial = 0;

            Debug.Log($"[TileBag] ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©: '{data.letter}'");
        }
        return data;
    }

    public void RefillTileBag()
    {
        pool.Clear(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ñ‡∏∏‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        TotalInitial = 0;

        foreach (var lc in initialLetters)
        {
            TotalInitial += lc.count;
            for (int i = 0; i < lc.count; i++)
            {
                pool.Add(lc.data);
            }
        }

        drawsSinceSpecial = 0;

        Debug.Log("üîÅ Refill tile bag ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: " + pool.Count);
    }

    /// <summary>‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∏‡∏á (‡∏Å‡∏£‡∏ì‡∏µ Undo / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å)</summary>
    public void ReturnTile(LetterData data) => pool.Add(data);
}
