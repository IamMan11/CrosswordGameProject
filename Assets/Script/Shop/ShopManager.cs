using System.Linq;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;
using System.Collections.Generic;

public class ShopManager : MonoBehaviour
{
    public static ShopManager Instance { get; private set; }
    /* === UI ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (‡∏•‡∏≤‡∏Å‡πÉ‡∏ô Inspector) ========================= */
    [Header("UI")]
    [SerializeField] TMP_Text coinText;
    [SerializeField] Button manaBtn;
    [SerializeField] Button slotBtn;
    [SerializeField] Button tileBtn;
    [SerializeField] Button RerollBtn;

    /* === ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á  ======================================== */
    [Header("Upgrade Cost / ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")]
    [SerializeField] int manaUpgradeCost = 50;
    [SerializeField] int slotUpgradeCost = 75;
    [SerializeField] int tilepackCost = 40;
    [SerializeField] int rerollCost = 50;

    /* === ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î  ================================ */
    [Header("Upgrade Limits (‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")]
    [SerializeField] int manaUpgradeMaxTimes = 5;   // +2 Mana / ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    [SerializeField] int slotUpgradeMaxTimes = 2;   // +1 Card Slot / ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    [SerializeField] int tileUpgradeMaxTimes = 10;  // +10 Tile / ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

    [Header("Shop Slots")]
    [SerializeField] ShopCardSlot[] shopSlots;

    /* === ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á PlayerPrefs ========================= */
    const string PREF_MANA = "CC_UPG_MANA";
    const string PREF_SLOT = "CC_UPG_SLOT";
    const string PREF_TILE = "CC_UPG_TILE";

    /* === ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥  ================================ */
    int manaBought, slotBought, tileBought;

    /* ----------------------------------------------------------- */
    void Awake()
    {
        if (Instance != null && Instance != this) { Destroy(gameObject); return; }  // üÜï
        Instance = this;                                                            // üÜï

        // ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        manaBought = PlayerPrefs.GetInt(PREF_MANA, 0);
        slotBought = PlayerPrefs.GetInt(PREF_SLOT, 0);
        tileBought = PlayerPrefs.GetInt(PREF_TILE, 0);
    }

    void Start()
    {
        RefreshUI();        // ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
        TryRerollAtStart();
    }
    List<CardData> BuildPurchasablePool()
    {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Resources/Cards
        var all = Resources.LoadAll<CardData>("Cards");

        // ‡∏Å‡∏£‡∏≠‡∏á: requirePurchase = true ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
        var pool = all.Where(c => c != null
                            && c.requirePurchase
                            && !PlayerProgressSO.Instance.HasCard(c.id))
                    .ToList();
        return pool;
    }
    void TryRerollAtStart() {
        if (CardManager.Instance == null) {
            Debug.LogError("[Shop] CardManager.Instance = null (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏≤‡∏á CardManager ‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô)");
            return;
        }
        if (shopSlots == null || shopSlots.Length == 0) {
            Debug.LogError("[Shop] shopSlots ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Inspector");
            return;
        }
        for (int i = 0; i < shopSlots.Length; i++) {
            if (shopSlots[i] == null) {
                Debug.LogError($"[Shop] shopSlots[{i}] = null (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏≤‡∏Å‡∏™‡∏•‡∏≠‡∏ï‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {i})");
                return;
            }
        }
        RerollShop();
    }

    /* ---------- ‡∏õ‡∏∏‡πà‡∏° Back ‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å ---------- */
    public void OnPlayPressed()
    {
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏û‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ extraTiles ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if (TileBag.Instance != null)
            TileBag.Instance.ResetPool();    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å RebuildPool() ‡πÉ‡∏´‡∏°‡πà :contentReference[oaicite:0]{index=0}

        // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÇ‡∏´‡∏•‡∏î Scene ‡πÄ‡∏Å‡∏°‡∏´‡∏•‡∏±‡∏Å
        SceneManager.LoadScene("Try");
    }

    /* ---------- ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á ---------- */
    public void OnBuyMana()
    {
        if (manaBought >= manaUpgradeMaxTimes)
        {
            ShowMsg("‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Mana ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!");
            return;
        }

        if (!Spend(manaUpgradeCost)) return;

        PlayerProgressSO.Instance.data.maxMana += 2;
        manaBought++;
        PlayerPrefs.SetInt(PREF_MANA, manaBought);
        RefreshUI();
        ShowMsg("+2 Mana ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    public void OnBuyCardSlot()
    {
        if (slotBought >= slotUpgradeMaxTimes)
        {
            ShowMsg("‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Slot ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!");
            return;
        }

        if (!Spend(slotUpgradeCost)) return;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Progress
        PlayerProgressSO.Instance.data.maxCardSlots += 1;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô CardManager ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Progress ‡πÉ‡∏´‡∏°‡πà
        if (CardManager.Instance != null)
            CardManager.Instance.UpgradeMaxHeldCards(PlayerProgressSO.Instance.data.maxCardSlots);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        slotBought++;
        PlayerPrefs.SetInt(PREF_SLOT, slotBought);
        RefreshUI();
        ShowMsg("+1 Card Slot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    public void OnBuyTilePack()
    {
        if (tileBought >= tileUpgradeMaxTimes)
        {
            ShowMsg("‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î TilePack ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!");
            return;
        }
        if (!Spend(tilepackCost)) return;

        // 1) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ProgressSO ‡∏Å‡πà‡∏≠‡∏ô
        PlayerProgressSO.Instance.data.extraTiles += 10;
        tileBought++;
        PlayerPrefs.SetInt(PREF_TILE, tileBought);


        RefreshUI();
        ShowMsg("+10 Tiles ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
    public void OnRerollPressed() {
        if (!CurrencyManager.Instance.Spend(rerollCost)) {
            Debug.Log("[Shop] ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reroll");
            return;
        }
        RerollShop();
        RefreshUI(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç coin
    }
    void RerollShop() {
    // ‡πÄ‡∏ã‡∏ü‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏û‡∏π‡∏•
        var pool = BuildPurchasablePool();

        for (int i = 0; i < shopSlots.Length; i++)
        {
            CardData pick = null;

            if (pool.Count > 0)
            {
                // ‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° (‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
                int idx = Random.Range(0, pool.Count);
                pick = pool[idx];
                pool.RemoveAt(idx);
            }

            // ‡πÉ‡∏™‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á (‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡∏û‡∏π‡∏•‡∏´‡∏°‡∏î)
            shopSlots[i].SetCard(pick);

            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ:
            // shopSlots[i].gameObject.SetActive(pick != null);
        }
    }

    /* ---------- Helper: ‡∏´‡∏±‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ---------- */
    bool Spend(int cost)
    {
        if (!CurrencyManager.Instance.Spend(cost))
        {
            ShowMsg("‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠");
            return false;
        }
        return true;
    }

    /* ---------- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI / ‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏° ---------- */
    public void RefreshUI()
    {
        coinText.text = $"Coins : {CurrencyManager.Instance.Coins}";

        manaBtn.interactable = manaBought < manaUpgradeMaxTimes;
        slotBtn.interactable = slotBought < slotUpgradeMaxTimes;
        tileBtn.interactable = tileBought < tileUpgradeMaxTimes;
    }

    /* ---------- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ---------- */
    void ShowMsg(string msg) => Debug.Log($"[Shop] {msg}");
    public void ShowToast(string msg) => ShowMsg(msg); 
}
